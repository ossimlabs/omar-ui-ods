//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR UI application (formerly omar-app).
// Environment variables that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    DOCKER_REGISTRY_USERNAME: The user to use logging into the docker registry
//    DOCKER_REGISTRY_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

def notifyObj
node("omar-build"){
    def workspaceDir = pwd()
    def appName = "omar-ui-ods"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"
    env.O2_DEV_HOME = pwd()

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }
        dir("omar-core") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/omar-core.git"
        }
        dir("omar-hibernate-spatial") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/omar-hibernate-spatial.git"
        }
        dir("omar-openlayers") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/omar-openlayers.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
    }

    stage("Download Artifacts") {
         step ([$class: "CopyArtifact",
                projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
                filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
                flatten: true])
         sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
         notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }
    try {
      stage ("Publish Nexus")
      {
          withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {

                    sh """
                    pushd ${workspaceDir}/${appName}
                    ./gradlew ${appName}-app:upload
                    """
            }
      }
      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerQuayCredentials',
                        usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                        passwordVariable: 'DOCKER_REGISTRY_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${workspaceDir}/${appName}
            ./gradlew :${appName}-app:${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    
    try {
         stage('HPFortify Analysis') {
            dir(appName) {
               sh """
                  export PATH=${PATH}:/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin
                  sourceanalyzer -64 -b ${appName} -clean
                  sourceanalyzer -64 -b ${appName} ${workspaceDir}/${appName}-dev/${appName}/apps/${appName}-app/grails-app/assets/javascripts/**/*.js
                  sourceanalyzer -64 -b ${appName} -scan -Xmx8G -f fortifyResults-${appName}.fpr
                  ReportGenerator -format pdf -f fortifyResults-${appName}.pdf -source fortifyResults-${appName}.fpr
                  aws s3 cp fortifyResults-${appName}.pdf s3://o2-private/hpfortify/fortify-reports-pdf/
                  aws s3 cp fortifyResults-${appName}.fpr s3://o2-private/hpfortify/fortify-reports-fpr/
                  fortifyclient -url http://hpfortify.ossim.io:8080/ssc -authtoken 02c59c7f-a092-45c3-be81-9b7f9dae5728 uploadFPR -file fortifyResults-${appName}.fpr -applicationVersionID 2
               """
         }
      }
   }
   catch (e)
   {
      echo e.toString()
   }
    
  stage("Clean Workspace")
  {
      if ("${CLEAN_WORKSPACE}" == "true")
        step([$class: 'WsCleanup'])
  }
}
